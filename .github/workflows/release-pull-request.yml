name: release-pull-request
on:
  schedule:
    - cron: '0 8 * * *'
  repository_dispatch:
    types: [update-command]
  workflow_dispatch:
jobs:
  check_new_commits:
    runs-on: ubuntu-latest
    name: Check latest commit
    outputs:
      should_run: ${{ steps.should_run.outputs.should_run }}
    steps:
      - uses: actions/checkout@v2
      - name: print latest_commit
        run: echo ${{ github.sha }}

      - id: should_run
        continue-on-error: true
        name: check latest commit is less than a day
        if: ${{ github.event_name == 'schedule' }}
        run: test -z $(git rev-list  --after="24 hours"  ${{ github.sha }}) && echo "::set-output name=should_run::false"
  create-release-pull-request:
    needs:
      - check_new_commits
    if: ${{ needs.check_date.outputs.should_run != 'false' && needs.check_date.outputs.pr_commented != 'false' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v2
      - name: Cache node modules
        uses: actions/cache@v2
        id: cache-modules
        with:
          path: |
            node_modules
            */*/node_modules
          key: modules-${{ runner.os }}-${{ hashFiles('yarn.lock') }}
      - name: Install dependencies
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: yarn --non-interactive --frozen-lockfile
      - name: generate release pull request name
        run: |
          currentSemcoreUiVersion="$(cat semcore/ui/package.json | jq -r .version)"
          # if it sheduled triggered
          [[ "${{ github.event.pull_request.head.ref }}" -eq master ]] && echo "release_pr_name=release-after-$currentSemcoreUiVersion" >> $GITHUB_ENV
          [[ "${{ github.event.pull_request.head.ref }}" -eq master ]] && echo "release_branch_name=release/after-$currentSemcoreUiVersion" >> $GITHUB_ENV
          # if it slash command triggered
          [[ "${{ github.event.pull_request.head.ref }}" -eq master ]] || echo "release_pr_name=$( gh pr list --search ${{ github.event.pull_request.head.ref }} --limit 1 --json headRefName | jq -r ".[0].headRefName" )" >> $GITHUB_ENV
          [[ "${{ github.event.pull_request.head.ref }}" -eq master ]] || echo "release_branch_name=${{ github.event.pull_request.head.ref }}" >> $GITHUB_ENV
      - name: Github auth
        run: |
          git config --global user.name 'semrush-ci-whale'
          git config --global user.email 'semrush-ci-whale@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{ secrets.BOT_ACCOUNT_GITHUB_TOKEN }}@github.com/semrush/intergalactic
          echo "${{ secrets.BOT_ACCOUNT_GITHUB_TOKEN }}" > ./.gh-auth-token.txt
          gh auth login --with-token < ./.gh-auth-token.txt
          rm ./.gh-auth-token.txt
      - name: check release branch already exists
        run: |
          existed_in_remote=$(git ls-remote --heads origin "${{ env.release_branch_name }}")
          if [[ -z ${existed_in_remote} ]]; then
            echo "release_branch_already_exists=false" >> $GITHUB_ENV
          else
            echo "release_branch_already_exists=true" >> $GITHUB_ENV
          fi
      - name: create release branch
        run: |
          git checkout -b "${{ env.release_branch_name }}"
        if: env.release_branch_already_exists != 'true'
      - name: checkout release branch
        run: |
          git fetch --all
          git checkout "${{ env.release_branch_name }}"
          echo "firstCommitHash=$(git log origin/master..origin/${{ env.release_branch_name }} --pretty=format:"%H" | tail -1)" >> $GITHUB_ENV
          echo "secondCommitHash=$(git log origin/master..origin/${{ env.release_branch_name }} --pretty=format:"%H" | tail -2 | head -1)" >> $GITHUB_ENV
          echo "lastCommitHash=$(git log origin/master..origin/${{ env.release_branch_name }} --pretty=format:"%H" | head -1)" >> $GITHUB_ENV
        if: env.release_branch_already_exists == 'true'
      - name: commit changelog change as a first commit in the release branch
        run: |
          yarn update-release-changelog
          git add semcore/ui/CHANGELOG.md
          git add semcore/ui/package.json
          git commit -m "[chore] Automatically updated @semcore/ui changelog"
        if: env.release_branch_already_exists != 'true'
      - name: edit changelog change commit in the release branch
        run: |
          git checkout "${{ env.firstCommitHash }}"
          yarn update-release-changelog
          git add semcore/ui/CHANGELOG.md
          git add semcore/ui/package.json
          git commit -m "[chore] Automatically updated @semcore/ui changelog" --amend --no-edit
          git pull origin master --rebase
          [[ "${{ env.firstCommitHash }}" -eq "${{ env.lastCommitHash }}" ]] || git cherry-pick "${{ env.secondCommitHash }}^..${{ env.lastCommitHash }}" --strategy-option theirs  --allow-empty
        if: env.release_branch_already_exists == 'true'
      - name: push updated changelog
        run: |
          git push --set-upstream origin "${{ env.release_branch_name }}" --force
      - name: create pull request
        run: |
          gh pr create --title "${{ env.release_pr_name }}" --body "This is automatically created pull request for the next `@semcore/ui` package release.\n\nBot pulls changes from `master` branch and regenerates `./semcore/ui/CHANGELOG.md` file every morning and when `/update` command dispatched in pull request comment.\n\nTo edit changelog or release version in your own way, checkout branch, commit changes and push it to pull request.\n\nWhen release is ready, dispatch it with `/release` comment." --draft --base master
        if: env.release_branch_already_exists != 'true'
